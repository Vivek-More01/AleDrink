//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerDrink"",
            ""id"": ""49e41699-353d-4a51-b3f5-cc3376a16b3c"",
            ""actions"": [
                {
                    ""name"": ""Drink"",
                    ""type"": ""Button"",
                    ""id"": ""c27ec55d-ddc1-407d-b883-59f853140cb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shrink"",
                    ""type"": ""Button"",
                    ""id"": ""c810aef3-b02c-4a2d-bc1d-caa396e5c1f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40c2a65e-d0b9-445b-96df-b76ddc9be8b3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Drink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c25303cc-bb54-4e78-834b-5da976caa888"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fafb996c-dbf9-4dd6-90b0-20c0875a4334"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shrink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee2e155f-18c1-49b4-8b7a-6c0f08819284"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shrink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>/{PrimaryTrigger}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerDrink
        m_PlayerDrink = asset.FindActionMap("PlayerDrink", throwIfNotFound: true);
        m_PlayerDrink_Drink = m_PlayerDrink.FindAction("Drink", throwIfNotFound: true);
        m_PlayerDrink_Shrink = m_PlayerDrink.FindAction("Shrink", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerDrink
    private readonly InputActionMap m_PlayerDrink;
    private List<IPlayerDrinkActions> m_PlayerDrinkActionsCallbackInterfaces = new List<IPlayerDrinkActions>();
    private readonly InputAction m_PlayerDrink_Drink;
    private readonly InputAction m_PlayerDrink_Shrink;
    public struct PlayerDrinkActions
    {
        private @Controls m_Wrapper;
        public PlayerDrinkActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drink => m_Wrapper.m_PlayerDrink_Drink;
        public InputAction @Shrink => m_Wrapper.m_PlayerDrink_Shrink;
        public InputActionMap Get() { return m_Wrapper.m_PlayerDrink; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerDrinkActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerDrinkActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerDrinkActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerDrinkActionsCallbackInterfaces.Add(instance);
            @Drink.started += instance.OnDrink;
            @Drink.performed += instance.OnDrink;
            @Drink.canceled += instance.OnDrink;
            @Shrink.started += instance.OnShrink;
            @Shrink.performed += instance.OnShrink;
            @Shrink.canceled += instance.OnShrink;
        }

        private void UnregisterCallbacks(IPlayerDrinkActions instance)
        {
            @Drink.started -= instance.OnDrink;
            @Drink.performed -= instance.OnDrink;
            @Drink.canceled -= instance.OnDrink;
            @Shrink.started -= instance.OnShrink;
            @Shrink.performed -= instance.OnShrink;
            @Shrink.canceled -= instance.OnShrink;
        }

        public void RemoveCallbacks(IPlayerDrinkActions instance)
        {
            if (m_Wrapper.m_PlayerDrinkActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerDrinkActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerDrinkActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerDrinkActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerDrinkActions @PlayerDrink => new PlayerDrinkActions(this);
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IPlayerDrinkActions
    {
        void OnDrink(InputAction.CallbackContext context);
        void OnShrink(InputAction.CallbackContext context);
    }
}
